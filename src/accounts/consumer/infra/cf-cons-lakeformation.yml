AWSTemplateFormatVersion: 2010-09-09
Description: AWSCloudFormationStackSetAdministrationRole to enable use of AWS CloudFormation StackSets.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.10.0/16
    PublicOne:
      CIDR: 10.0.10.0/24
    PublicTwo:
      CIDR: 10.0.11.0/24
    Private:
      CIDR: 10.0.12.0/24

Parameters:
  DeploymentRootName:
    Description: Root name of project/component deployment
    Type: String
    Default: lakehouse
  AccountShorthand:
    Description: Abbreviated logical account identifier
    Type: String
    Default: cons
  Region:
    Description: The region for the template to be deployed.
    Type: String
    Default: us-east-2
    AllowedValues:
      - us-east-2
      - us-east-1
  CompId:
    Description: This templates' component identifier string
    Type: String
    Default: cons-lf
  Env:
    Description: The environment in which the account is being deployed.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  TestUserPassword:
    Type: String
    Description: Password for all test users.
    NoEcho: true
  
Resources:
  LakeFormationVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-vpc-${AWS::AccountId}-${Region}'
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Private
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-private-subnet-${AWS::AccountId}-${Region}'
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-public-subnet-1-${AWS::AccountId}-${Region}'
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-public-subnet-2-${AWS::AccountId}-${Region}'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-IG-${AWS::AccountId}-${Region}'
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref LakeFormationVPC
      InternetGatewayId: !Ref InternetGateway
  InternetGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref InternetGatewayRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetOne
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetTwo
  NATGatewayAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      AllocationId: !GetAtt NATGatewayAttachment.AllocationId
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-NAT-Gateway-${AWS::AccountId}-${Region}'
  NATGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: !Sub '${Env}-${DeploymentRootName}-${CompId}-NAT-Route-Table-${AWS::AccountId}-${Region}'
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATGatewayRouteTable
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref NATGatewayRouteTable
      SubnetId: !Ref PrivateSubnet
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Principal: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref NATGatewayRouteTable
        - !Ref InternetGatewayRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref LakeFormationVPC

  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Env}-${DeploymentRootName}-${CompId}-glue-role-${AWS::AccountId}-${Region}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-glue-role-policy-1-${AWS::AccountId}-${Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref DataLakeBucket
        - PolicyName: Glue-Demo-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LfBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LfBucket
        - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-glue-role-policy-3-${AWS::AccountId}-${Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:*'
                Resource: '*'
        - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-glue-role-policy-4-${AWS::AccountId}-${Region}'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - !Sub ':role/${Env}-lakehouse-${CompId}-glue-service-role'
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
        - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-glue-role-policy-5-${AWS::AccountId}-${Region}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "s3:*"
                  - "glue:*"
                  - "logs:*"
                  - "lakeformation:*"
                Resource:
                  - !Join [ '', ["arn:aws:s3:::*"]] 
                  - !Join [ '', ["arn:aws:glue:*:*:", "*"]]
                  - !Join [ '', ["arn:aws:lakeformation:*:*:", "*"]]
                  - !Join [ '', ["arn:aws:logs:*:*:", "*"]]

  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Env}-${DeploymentRootName}-${CompId}-logs-${AWS::AccountId}-${Region}'
      AccessControl: LogDeliveryWrite
  DataLakeBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Env}-${DeploymentRootName}-${CompId}-data-lake-bucket-${AWS::AccountId}-${Region}'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: data-lake-bucket/
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  LfBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${Env}-${DeploymentRootName}-${CompId}-lf-bucket-${AWS::AccountId}-${Region}'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: lf-bucket/
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
  DeveloperUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub '${Env}-${DeploymentRootName}-${CompId}-lf-developer-${AWS::AccountId}-${Region}'
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LfBucket
                      - /athena-results/*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
  CampaignManagerUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub '${Env}-${DeploymentRootName}-${CompId}-hr-manager-${AWS::AccountId}-${Region}'
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword 
        PasswordResetRequired: false
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
        - 'arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager'
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
      Policies:
        - PolicyName: LF-DataLake-Admin-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:*'
                  - 'lakeformation:Drop*'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:LookupEvents'
                  - 'glue:*'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketAcl'
                  - 'iam:ListUsers'
                  - 'iam:ListRoles'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'cloudformation:*'
                  - 'elasticmapreduce:*'
                  - 'tag:Get*'
                  - 'glue:BatchGetCrawlers'
                  - 'ec2:AuthorizeSecurityGroupEgress'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:RevokeSecurityGroupEgress'
                  - 'ec2:RevokeSecurityGroupIngress'
                  - 'redshift:*'
                  - 'redshift-data:*'
                Resource: '*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - '*'
        # - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-hr-manager-policy-${AWS::AccountId}-${Region}'
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Action:
        #           - 's3:Put*' # Testing first without explicit LF access (should be configured through LF, not IAM)
        #           - 's3:Get*'
        #           - 's3:List*'
        #           - 'redshift:*'
        #           - 'lakeformation:*'
        #           - 'glue:*'
        #         Resource:
        #           - !Join 
        #             - ''
        #             - - 'arn:aws:s3:::'
        #               - 'arn:aws:lakeformation:*:*:*'
        #               - 'arn:aws:glue:*:*:*'
        #               - !Ref LfBucket
        #               - /athena-results/*
  BusinessAnalystUser:
    Type: 'AWS::IAM::User'
    Properties:
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LfBucket
                      - /athena-results/*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'
      UserName: !Sub "${Env}-lakehouse-${CompId}-lf-business-analyst"
  
Outputs:
  LFDataLakeBucketName:
    Description: Lake Formation Data Lake Bucket Name
    Value: !Ref DataLakeBucket
  LfBucketName:
    Description: Lake Formation Workshop Bucket Name
    Value: !Ref LfBucket
  AthenaQueryResultLocation:
    Description: Athena Query Result Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LfBucket
        - /athena-results/
  NYCTaxiDataLocation:
    Description: NY Taxi Data Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LfBucket
        - /glue/nyctaxi
  PythonScriptLocation:
    Description: Python Shell Script Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LfBucket
        - /glue/scripts/nyctaxi-csv-to-json.py
  MetadataLocation:
    Description: Metadata Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LfBucket
        - /metadata
  LFUsersPassword:
    Description: Password for Data Lake Users
    Value: !Ref TestUserPassword
  ConsoleIAMLoginUrl:
    Description: Console IAM Login URL to try out different users
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref 'AWS::AccountId'
        - .signin.aws.amazon.com/console