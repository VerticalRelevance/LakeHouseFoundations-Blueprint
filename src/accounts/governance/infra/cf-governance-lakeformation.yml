AWSTemplateFormatVersion: 2010-09-09
Description: AWSCloudFormationStackSetAdministrationRole to enable use of AWS CloudFormation StackSets.

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.20.0/16
    PublicOne:
      CIDR: 10.0.20.0/24
    PublicTwo:
      CIDR: 10.0.21.0/24
    Private:
      CIDR: 10.0.22.0/24

Parameters:
  ComponentID:
    Description: This templates' component identifier string
    Type: String
    Default: gov-lakeformation
  Env:
    Description: The environment in which the account is being deployed.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  TestUserPassword:
    Type: String
    Default: Password1!
    Description: Password for all test users.

Resources:
  # LakeformationSecurityGroup:
  #   Type: 'AWS::EC2::SecurityGroup'
  #   Properties:
  #     GroupDescription: Security Group for Lakeformation VPC
  #     VpcId: !Ref LakeFormationVPC
  #     Tags:
  #       - Key: Name
  #         Value: Lakeformation-SecGroup
  # SelfIngress:
  #   Type: 'AWS::EC2::SecurityGroupIngress'
  #   DependsOn: RDSSecurityGroup
  #   Properties:
  #     GroupId: !Ref RDSSecurityGroup
  #     IpProtocol: '-1'
  #     SourceSecurityGroupId: !Ref RDSSecurityGroup
  LakeFormationVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - VPC
        - CIDR
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: LF-Workshop-VPC
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - Private
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PrivateSubnet
  PublicSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicOne
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubnetOne
  PublicSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: !FindInMap 
        - SubnetConfig
        - PublicTwo
        - CIDR
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-Workshop-PublicSubnetTwo
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: LF-Workshop-IG
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref LakeFormationVPC
      InternetGatewayId: !Ref InternetGateway
  InternetGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
  InternetGatewayRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref InternetGatewayRouteTable
      GatewayId: !Ref InternetGateway
  PublicSubnetOneRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetOne
  PublicSubnetTwoRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref InternetGatewayRouteTable
      SubnetId: !Ref PublicSubnetTwo
  NATGatewayAttachment:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      SubnetId: !Ref PublicSubnetOne
      AllocationId: !GetAtt 
        - NATGatewayAttachment
        - AllocationId
      Tags:
        - Key: Name
          Value: LF-NAT-Gateway
  NATGatewayRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref LakeFormationVPC
      Tags:
        - Key: Name
          Value: LF-NAT-RouteTable
  NATGatewayRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref NATGatewayRouteTable
      NatGatewayId: !Ref NATGateway
  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref NATGatewayRouteTable
      SubnetId: !Ref PrivateSubnet
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: '*'
            Principal: '*'
            Resource: '*'
      RouteTableIds:
        - !Ref NATGatewayRouteTable
        - !Ref InternetGatewayRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref LakeFormationVPC

  # TPCGlueConnector:
  #   Type: 'AWS::Glue::Connection'
  #   Properties:
  #     CatalogId: !Ref 'AWS::AccountId'
  #     ConnectionInput:
  #       Name: TPCGlueConnector
  #       ConnectionType: JDBC
  #       PhysicalConnectionRequirements:
  #         AvailabilityZone: !Select 
  #           - 0
  #           - !GetAZs 
  #             Ref: 'AWS::Region'
  #         SubnetId: !Ref PublicSubnetOne
  #         SecurityGroupIdList:
  #           - !Ref RDSSecurityGroup
  #       ConnectionProperties:
  #         JDBC_CONNECTION_URL: !Join 
  #           - ''
  #           - - 'jdbc:mysql://'
  #             - !GetAtt 
  #               - TPCDatabase
  #               - Endpoint.Address
  #             - ':3306/tpc'
  #         USERNAME: !Ref DBMasterUser
  #         PASSWORD: !Ref DBMasterPassword
  #         JDBC_ENFORCE_SSL: 'false'
  GlueServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
                - lakeformation.amazonaws.com
                - firehose.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonKinesisFullAccess'
      Policies:
        - PolicyName: LF-Data-Lake-Storage-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - 'dev-lakehouse-lh-s3-curated'
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - 'dev-lakehouse-lh-s3-curated'
        - PolicyName: Glue-Demo-Access-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /*
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
        - PolicyName: LF-DataAccess-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:GetDataAccess'
                  - 'lakeformation:GrantPermissions'
                Resource: '*'
        - PolicyName: LF-Workflow-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - !Sub ':role/${Env}-lakehouse-${ComponentID}-glue-service-role'
                  - !Join 
                    - ''
                    - - 'arn:aws:iam::'
                      - !Ref 'AWS::AccountId'
                      - ':role/LakeFormationWorkflowRole'
        - PolicyName: !Sub '${Env}-lakehouse-${ComponentID}-role-policy-1'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "s3:*"
                  - "glue:*"
                  - "logs:*"
                  - "lakeformation:*"
                Resource:
                  - !Join [ '', ["arn:aws:s3:::*"]] # , !Sub "${Env}", "-lakehouse-*"]]
                  - !Join [ '', ["arn:aws:glue:*:*:", "*"]]
                  - !Join [ '', ["arn:aws:lakeformation:*:*", "*"]]
                  - !Join [ '', ["arn:aws:logs:*:*:", "*"]]
      RoleName: !Sub "${Env}-lakehouse-${ComponentID}-glue-service-role"
  
  GovGlueCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${Env}-lakehouse-${ComponentID}-datalake-crawler'
      Description: Crawler of desired data resource
      Role: !Ref GlueServiceRole # GovGlueCatalogCrawlerRole
      DatabaseName: !Sub '${Env}-lakehouse-${ComponentID}-datalake-catalog'
      Targets:
        S3Targets: 
          - 
            Path: !Sub "${Env}-lakehouse-lh-s3-curated"
      Configuration: "{\"Version\":1.0,\"CrawlerOutput\":{\"Partitions\":{\"AddOrUpdateBehavior\":\"InheritFromTable\"},\"Tables\":{\"AddOrUpdateBehavior\":\"MergeNewColumns\"}}}"


  # DataLakeBucket:
  #   Type: 'AWS::S3::Bucket'
  #   Properties:
  #     BucketName: !Sub "${Env}-lakehouse-${ComponentID}-data-lake-bucket" 
  LFWorkshopBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${Env}-lakehouse-${ComponentID}-lf-workshop-bucket"

  AdminUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub "${Env}-lakehouse-${ComponentID}-lf-admin"
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-DataLake-Admin-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'lakeformation:*'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:LookupEvents'
                  - 'glue:*'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:ListAllMyBuckets'
                  - 's3:GetBucketAcl'
                  - 'iam:ListUsers'
                  - 'iam:ListRoles'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'cloudformation:*'
                  - 'elasticmapreduce:*'
                  - 'tag:Get*'
                  - 'glue:BatchGetCrawlers'
                  - 'ec2:AuthorizeSecurityGroupEgress'
                  - 'ec2:AuthorizeSecurityGroupIngress'
                  - 'ec2:RevokeSecurityGroupEgress'
                  - 'ec2:RevokeSecurityGroupIngress'
                  - 'redshift:*'
                Resource: '*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - '*'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLakeFormationCrossAccountManager'
        - 'arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess'
  DeveloperUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub "${Env}-lakehouse-${ComponentID}-lf-hr-developer"
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Tags:
        - Key: hr-developer
          Value: hr-developer
        - Key: hr-group
          Value: hr-developer
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'glue:*'
                  - 'lakeformation:*'
                  - 'athena:StartQueryExecution'
                  - 'athena:GetWorkGroup'
                  - 'athena:Get*'
                  # - 'glue:*'
                  # - 'lakeformation:*'
                  # - 'redshift:*'
                Resource:
                  - '*'
                  # - !Join ['', ['arn:aws:s3:::', !Ref LFWorkshopBucket, '/athena-results/*']]
                  # - 'arn:aws:athena:us-east-2:899456967600:*'
  CampaignManagerUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub "${Env}-lakehouse-${ComponentID}-lf-hr-manager"
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Tags:
        - Key: hr-group
          Value: hr-manager
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                  - 'glue:*'
                  - 'athena:StartQueryExecution'
                  - 'athena:GetWorkGroup'
                  - 'athena:Get*'
                  - 'lakeformation:*'
                  - 'redshift:*'
                  - 'redshift-data:ExecuteStatement'
                  - 'iam:ListUsers' # Have to provide iam actions for grants (data mesh functionality)
                  - 'iam:ListRoles'
                  - 'iam:GetRole'
                  - 'iam:GetRolePolicy'
                  - 'tag:Get*'
                  - 'cloudtrail:DescribeTrails'
                  - 'cloudtrail:LookupEvents'
                Resource:
                  - '*'
                  # - !Join ['', ['arn:aws:s3:::', !Ref LFWorkshopBucket, '/athena-results/*']]
                  # - !Sub 'arn:aws:iam::*:role/${Env}-lakehouse-${ComponentID}-glue-service-role'
                  # - 'arn:aws:glue:us-east-2:899456967600:*' # Added because without, the associated persona could not perform glue:SearchTables
                  # - 'arn:aws:lakeformation:us-east-2:899456967600:*' # Added because without, the associated persona could not perform glue:SearchTables
                  # - 'arn:aws:athena:us-east-2:899456967600:*'
              - Effect: Allow
                Action: 'iam:PassRole'
                Resource:
                  - '*'
  BusinessAnalystUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub "${Env}-lakehouse-${ComponentID}-lf-business-analyst"
      Path: /
      LoginProfile:
        Password: !Ref TestUserPassword
        PasswordResetRequired: false
      Policies:
        - PolicyName: LF-Athena-Query-Result-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Put*'
                  - 's3:Get*'
                  - 's3:List*'
                Resource:
                  - !Join 
                    - ''
                    - - 'arn:aws:s3:::'
                      - !Ref LFWorkshopBucket
                      - /athena-results/*
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonAthenaFullAccess'

Outputs:
  # LFDataLakeBucketName:
  #   Description: Lake Formation Data Lake Bucket Name
  #   Value: !Ref DataLakeBucket
  LFWorkshopBucketName:
    Description: Lake Formation Workshop Bucket Name
    Value: !Ref LFWorkshopBucket
  AthenaQueryResultLocation:
    Description: Athena Query Result Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /athena-results/
  NYCTaxiDataLocation:
    Description: NY Taxi Data Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /glue/nyctaxi
  PythonScriptLocation:
    Description: Python Shell Script Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /glue/scripts/nyctaxi-csv-to-json.py
  MetadataLocation:
    Description: Metadata Location
    Value: !Join 
      - ''
      - - 's3://'
        - !Ref LFWorkshopBucket
        - /metadata
  LFUsersPassword:
    Description: Password for Data Lake Users
    Value: !Ref TestUserPassword
  ConsoleIAMLoginUrl:
    Description: Console IAM Login URL to try out different users
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref 'AWS::AccountId'
        - .signin.aws.amazon.com/console