AWSTemplateFormatVersion: 2010-09-09
Description: Landing Zone Glue Resources

Parameters:
  DeploymentRootName:
    Description: Root name of project/component deployment
    Type: String
    Default: lakehouse
  AccountShorthand:
    Description: Abbreviated logical account identifier
    Type: String
    Default: lz
  CompId:
    Description: This templates' component identifier string
    Type: String
    Default: lz-glue
  Env:
    Description: The environment in which the account is being deployed.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  Region:
    Description: The region for the template to be deployed.
    Type: String
    Default: us-east-2
    AllowedValues:
      - us-east-2
      - us-east-1
  ResourceBucketName:
    Description: The name of the deployment resource bucket.
    Type: String
  WorkflowInitiatorS3Location:
    Description: The location of the Lambda Glue Workflow Initiator script.
    Type: String
  WorkfowInitiatorFileName:
    Description: The name of the file in the workflow initiator zip file.
    Type: String

Resources:
  ProducerWorkflow:
    Type: AWS::Glue::Workflow
    Properties:
      Name: !Sub "${Env}-${DeploymentRootName}-${CompId}-producer-workflow-${AWS::AccountId}-${Region}"
      Description: "Workflow to orchestrate data producer jobs into the S3 data lake."
  
  # GlueJobRole2:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Sub "${Env}-${DeploymentRootName}-${CompId}-x-account-role-${AWS::AccountId}-${Region}"
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS:
  #               - "arn:aws:iam::127700773039:root"
  #           Action: 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
  #     Policies:
  #       - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-role-policy-${AWS::AccountId}-${Region}'
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             -
  #               Effect: "Allow"
  #               Action: 
  #                 - "s3:*"
  #                 - "glue:*"
  #                 - "logs:*"
  #                 - "lakeformation:*"
  #               Resource:
  #                 - "*"
  GlueJobRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Env}-${DeploymentRootName}-${CompId}-role-${AWS::AccountId}-${Region}"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: 
                - "arn:aws:iam::127700773039:root"
              Service:
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
      Policies:
        - PolicyName: !Sub '${Env}-${DeploymentRootName}-${CompId}-role-policy-${AWS::AccountId}-${Region}'
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: 
                  - "s3:*"
                  - "glue:*"
                  - "logs:*"
                  - "lakeformation:*"
                  - "lambda:*"
                Resource:
                  - "arn:aws:s3:::*"
                  - "arn:aws:glue:*:*:*"
                  - "arn:aws:lakeformation:*:*:*"
                  - "arn:aws:logs:*:*:*"
                  - "arn:aws:lambda:*:*:*"
  PostDataJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Env}-${DeploymentRootName}-${CompId}-post-data-job-trigger-${AWS::AccountId}-${Region}"
      WorkflowName: !Ref ProducerWorkflow
      Type: "ON_DEMAND"
      Description: "Triggers the data producer workflow."
      Actions:
        - JobName: !Ref PostDataJob
          Arguments:
            "--job-bookmark-option": "job-bookmark-enable"
  PostDataJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "${Env}-${DeploymentRootName}-${CompId}-data-supply-job-${AWS::AccountId}-${Region}"
      Description: "Curates cleaned data into the target data lake bucket."
      MaxRetries: 3
      Role: !Ref GlueJobRole
      Command:
        Name: glueetl
        PythonVersion: "3"
        ScriptLocation: !Join ['', ["s3://", !ImportValue "LZ:ResourceBucketName",  !Sub "/${AccountShorthand}-scripts/post-data.py"]]
      GlueVersion: "3.0"
      ExecutionProperty:
        MaxConcurrentRuns: 2
      WorkerType: Standard
      NumberOfWorkers: 2
      DefaultArguments:  
        "--LOG_LEVEL": "INFO"
        "--enable-continuous-cloudwatch-log": true
        "--enable-continuous-log-filter": true
        "--enable-s3-parquet-optimized-committer": true
        "--enable-metrics": ""
        "--encryption-type": sse-s3
        "--job-bookmark-option": job-bookmark-enable
        "--TempDir": !Sub 's3://${Env}-${DeploymentRootName}-${CompId}-glue-studio-temporary-${AWS::AccountId}-${Region}/post'
        "--source_bucket_uri": !Join ['', ['s3://', !ImportValue "LZ:ProducerBucketName"]]
        "--target_bucket_uri": !Join ['', ['s3://', !ImportValue "LZ:LandingZoneBucketName"]]
  ProducerDataJobTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Env}-${DeploymentRootName}-${CompId}-producer-job-trigger-${AWS::AccountId}-${Region}"
      WorkflowName: !Ref ProducerWorkflow
      Type: "CONDITIONAL"
      StartOnCreation: true
      Description: "Initiates producer job."
      Actions:
        - JobName: !Ref ProducerJob
          Arguments:
            "--job-bookmark-option": "job-bookmark-enable"
      Predicate:
        Conditions:
          - LogicalOperator: EQUALS
            JobName: !Ref PostDataJob
            State: SUCCEEDED
  ProducerJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "${Env}-${DeploymentRootName}-${CompId}-producer-job-${AWS::AccountId}-${Region}"
      Description: "Producer into the lake house raw bucket."
      MaxRetries: 3
      Role: !Ref GlueJobRole
      Command:
        Name: glueetl
        PythonVersion: "3"
        ScriptLocation: !Join ['', ["s3://", !ImportValue "LZ:ResourceBucketName",  !Sub "/${AccountShorthand}-scripts/produce-data.py"]]
      GlueVersion: "3.0"
      ExecutionProperty:
        MaxConcurrentRuns: 2
      WorkerType: Standard
      NumberOfWorkers: 2
      DefaultArguments:  
        "--LOG_LEVEL": "INFO"
        "--enable-continuous-cloudwatch-log": true
        "--enable-continuous-log-filter": true
        "--enable-s3-parquet-optimized-committer": true
        "--enable-metrics": ""
        "--encryption-type": sse-s3
        "--job-bookmark-option": job-bookmark-enable
        "--TempDir": !Sub 's3://${Env}-${DeploymentRootName}-${CompId}-glue-studio-temporary-${AWS::AccountId}-${Region}/producer'
        "--source_bucket_uri": !Join ['', ['s3://', !ImportValue "LZ:LandingZoneBucketName"]]
        "--target_bucket_uri": !Sub 's3://${Env}-${DeploymentRootName}-lh-s3-raw-127700773039-${Region}'
  WorkflowInitiatorPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkflowInitiator
      Principal: 127700773039
  WorkflowInitiator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Env}-${DeploymentRootName}-${CompId}-workflow-initiator-${AWS::AccountId}-${Region}"
      Runtime: python3.9
      Role: !GetAtt GlueJobRole.Arn
      Handler: !Sub "${WorkfowInitiatorFileName}.initiate_workflow"
      Code:
        S3Key: !Ref WorkflowInitiatorS3Location
        S3Bucket: !Ref ResourceBucketName
      Environment:
        Variables: 
          GlueWorkflowName: !Join [ "396791034774", !Split  ["127700773039", !Ref ProducerWorkflow]]
  WorkflowStatusCheckerPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref WorkflowStatusChecker
      Principal: 127700773039
  WorkflowStatusChecker:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${Env}-${DeploymentRootName}-${CompId}-workflow-status-${AWS::AccountId}-${Region}"
      Runtime: python3.9
      Role: !GetAtt GlueJobRole.Arn
      Handler: !Sub "${WorkfowInitiatorFileName}.get_workflow_state"
      Code:
        S3Key: !Ref WorkflowInitiatorS3Location
        S3Bucket: !Ref ResourceBucketName
      Environment:
        Variables: 
          GlueWorkflowName: !Join [ "396791034774", !Split  ["127700773039", !Ref ProducerWorkflow]]
