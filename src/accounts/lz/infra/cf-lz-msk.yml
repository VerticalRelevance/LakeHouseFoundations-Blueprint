AWSTemplateFormatVersion: "2010-09-09"
Description: "MSK source for reference architecture landing zone."
Metadata:
  LICENSE: MIT
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          Detault: Debugging (optional)
          Parameters:
            - EnableBastionHost
            - KeyPair

Parameters:

  ComponentID:
    Description: This templates' component identifier string
    Type: String
    Default: consumer-lakeformation

  Env:
    Description: The environment in which the account is being deployed.
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - qa
      - prod
  
  ProjectName:
    Type: String
    Description: Project name to link stacks
    Default: VR-LakeHouse-Ref-Arch

  EC2Ami:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: EC2 AMI ID
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  ClusterName:
    Type: String
    Description: Amazon MSK Cluster Name

  # Debugging (optional)

  EnableBastionHost:
    AllowedValues:
      - "true"
      - "false"
    Default: "false"
    Description: "if true it enables a bastion host for debugging"
    Type: String

  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "EC2 Key Pair to allow SSH access to the bastion host"

Conditions:
  EnableBastionHost: !Equals
    - !Ref EnableBastionHost
    - "true"

Resources:

  MSKCluster:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: !Ref ClusterName
      KafkaVersion: 2.2.1
      NumberOfBrokerNodes: 2
      EnhancedMonitoring: PER_BROKER
      EncryptionInfo:
        EncryptionInTransit:
          ClientBroker: TLS
          InCluster: true
      OpenMonitoring:
        Prometheus:
          JmxExporter:
            EnabledInBroker: "true"
          NodeExporter:
            EnabledInBroker: "true"
      BrokerNodeGroupInfo:
        BrokerAZDistribution: DEFAULT
        InstanceType: kafka.m5.large
        SecurityGroups:
          - !Ref MSKSecurityGroup
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
        ClientSubnets:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  MSKSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the MSK Cluster"
      VpcId: !ImportValue VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          CidrIp: !Ref VpcCIDR
        - IpProtocol: tcp
          FromPort: 9094
          ToPort: 9094
          CidrIp: !Ref VpcCIDR
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          CidrIp: !Ref VpcCIDR

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${ProjectName}:PublicSubnet1"

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${ProjectName}:PublicSubnet2"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Public Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${ProjectName}:PublicSubnet2"

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Private Routes (AZ1)"

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${ProjectName}:PrivateSubnet1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName} Private Routes (AZ2)"

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: 
        Fn::ImportValue: 
          !Sub "${ProjectName}:PrivateSubnet2"
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ProjectName

  CloudMapNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Sub "content.local"
      Vpc: !Ref VPC

  BastionSecurityGroup:
    Condition: EnableBastionHost
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allows SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Bastion:
    Condition: EnableBastionHost
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2Ami
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1

Outputs:

  ECSCluster:
    Description: A reference to the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${ProjectName}:ECSCluster"

  CloudMapNamespaceId:
    Description: The id of to the Cloud Map namespace
    Value: !GetAtt CloudMapNamespace.Id
    Export:
      Name: !Sub "${ProjectName}:CloudMapNamespaceId"

  BastionIp:
    Condition: EnableBastionHost
    Description: The ip address of the bastion host
    Value: !GetAtt Bastion.PublicIp
    Export:
      Name: !Sub "${ProjectName}:BastionIp"

  MSKClusterArn:
    Description: The Arn for the MSKMMCluster MSK cluster
    Value: !Ref MSKCluster

  MSKSecurityGroupID:
    Description: The ID of the security group created for the MSK clusters
    Value: !GetAtt
      - MSKSecurityGroup
      - GroupId